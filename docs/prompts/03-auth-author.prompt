You are an expert software architect specializing in designing backend systems for AI-powered applications using FastAPI and PostgreSQL.

I have the following Python FastAPI project structure (file tree):

.
├── Makefile
├── README.md
├── app
│   ├── __init__.py
│   ├── ai
│   │   ├── __init__.py
│   │   ├── ai_service.py
│   │   ├── difficulty.py
│   │   ├── llm_connectors
│   │   │   ├── __init__.py
│   │   │   ├── cohere_connector.py
│   │   │   ├── huggingface_connector.py
│   │   │   └── openai_connector.py
│   │   ├── models
│   │   │   ├── __init__.py
│   │   │   ├── llm_response_model.py
│   │   │   ├── prompt_model.py
│   │   │   └── qa_response_model.py
│   │   ├── prompts
│   │   │   ├── __init__.py
│   │   │   ├── generate_assessment_prompt.txt
│   │   │   └── recommend_topic_prompt.txt
│   │   ├── recommendation.py
│   │   ├── schemas
│   │   │   ├── __init__.py
│   │   │   ├── llm_response_schema.py
│   │   │   ├── prompt_schema.py
│   │   │   └── qa_response_schema.py
│   │   └── services
│   │       ├── __init__.py
│   │       ├── difficulty_service.py
│   │       └── recommendation_service.py
│   ├── api
│   │   └── __init__.py
│   ├── core
│   │   ├── __init__.py
│   │   ├── async_tasks.py
│   │   ├── cache_manager.py
│   │   ├── config.py
│   │   ├── database.py
│   │   ├── logging_config.py
│   │   ├── security.py
│   │   └── utils.py
│   ├── database_drivers
│   │   ├── __init__.py
│   │   ├── base_driver.py
│   │   ├── mongo_driver.py
│   │   ├── mysql_driver.py
│   │   ├── postgres_driver.py
│   │   └── sqlite_driver.py
│   ├── main.py
│   ├── media
│   │   ├── __init__.py
│   │   ├── assessment_reports
│   │   ├── recommendation_outputs
│   │   └── user_profiles
│   ├── models
│   │   ├── __init__.py
│   │   ├── assessment.py
│   │   ├── base.py
│   │   ├── course.py
│   │   ├── learning_progress.py
│   │   ├── recommendation.py
│   │   └── user.py
│   ├── schemas
│   │   ├── __init__.py
│   │   ├── assessment_schemas.py
│   │   ├── course_schemas.py
│   │   ├── learning_progress_schemas.py
│   │   ├── recommendation_schemas.py
│   │   ├── tokens.py
│   │   └── user_schemas.py
│   ├── services
│   │   ├── __init__.py
│   │   ├── assessment_service.py
│   │   ├── course_service.py
│   │   ├── learning_progress_service.py
│   │   ├── recommendation_service.py
│   │   └── user_service.py
│   └── static
│       ├── __init__.py
│       ├── images
│       ├── pdfs
│       └── reports
├── db_manager.py
├── docker-compose.yml
├── docs
│   ├── 01-phases.txt
│   ├── ai_models.md
│   ├── aignite-ppt.txt
│   ├── api_endpoints.md
│   ├── database_schema.md
│   ├── prompts
│   │   ├── 02-framework-source-tree.prompt
│   │   └── 03-auth-author.prompt
│   ├── setup_guide.md
│   ├── source-tree-create-shscript.sh
│   ├── swagger_generated.json
│   └── usecases
│       ├── 01-KnowledgeBase-AI-Chatbot.puml
│       └── usecase-list.md
├── logs
├── requirements.txt
├── scripts
│   ├── backup_db.sh
│   ├── db_init.py
│   ├── generate_test_data.py
│   ├── setup_env.sh
│   └── start_celery.sh
└── tests
    ├── __init__.py
    ├── conftest.py
    ├── test_ai
    │   ├── test_difficulty.py
    │   └── test_recommendation.py
    ├── test_api
    │   ├── test_ai_engine.py
    │   ├── test_assessments.py
    │   ├── test_courses.py
    │   ├── test_recommendations.py
    │   └── test_users.py
    ├── test_db_manager
    ├── test_db_manager.py
    ├── test_models
    │   ├── test_assessment.py
    │   ├── test_course.py
    │   └── test_user.py
    └── test_services
        ├── test_ai_service.py
        ├── test_course_service.py
        └── test_user_service.py

I need to implement authentication and authorization using JWT (JSON Web Tokens) with PostgreSQL as the database.

Considering the project structure above, what specific changes are required in my code, including:

*   Which files need to be modified?
*   What new functions or classes need to be added?
*   What are the crucial code snippets for JWT creation, verification, and user authentication?
*   Which libraries or dependencies must be installed and why?
* Give me example
*   Give me step by step guide

Provide a detailed, step-by-step guide, referencing specific files in the project structure where changes are needed.  Assume I am using SQLAlchemy for database interactions.  Focus on the core logic; I can handle the basic FastAPI setup.  Be very detailed.
